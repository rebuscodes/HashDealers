# -*- coding: utf-8 -*-

from pyDes import *
from itertools import combinations_with_replacement
import multiprocessing
import time

alphabet=list(str("abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890"))
numbers=list(str("1234567890"))
punct=list(str(",./\;:@'[]{}()=+*&%$Â£?`""! "))

def encrypt(key, words):

    #Encrypting messages
    k = des(key, CBC, "\0\0\0\0\0\0\0\0", pad=None, padmode=PAD_PKCS5)
    c = k.encrypt(words)
    print "Encrypted: %r" % c

def decrypt(key, words):

    #Decrypting messages
    k = des(key, CBC, "\0\0\0\0\0\0\0\0", pad=None, padmode=PAD_PKCS5)
    print "Decrypted: %r" % k.decrypt(words)

def force(words, x):

    #start itertools combination loop

    for c in combinations_with_replacement(numbers, 7):

        #Tons o' variables!

        key=list(c)
        key.insert(0, x)
        key=(''.join(key))
        k = des(key, CBC, "\0\0\0\0\0\0\0\0", pad=None, padmode=PAD_PKCS5)
        d="%r"%k.decrypt(words)
        d=eval(d)
        l=list(str(d))
        count=0
        check=""
        done=False

        #loops, inside loops, inside if statments (to decrypt stuff) 

        for i in range(0, len(l)):
            for a in range(0,62):
                if l[i]==alphabet[a]:
                    count+=1
                elif count>=5 and done == False:
                    check=(''.join(l))
                    checker=list(str(check))
                    counter=0
                    for q in range (0,len(checker)):
                        if checker[q] in alphabet:
                            counter+=1
                            if counter >= len(checker):
                                 print "Deciphered: "+check+"\t\tKey: "+key
                                 done=True
                                 break
                            else:
                                continue
                        elif checker[q] in punct:
                            counter+=1
                            if counter >= len(checker):
                                 print "Deciphered: "+check+"\t\tKey: "+key
                                 done=True
                                 break
                            else:
                                continue
                        else:
                            continue
                else:
                    continue

def multiP(words):

    jobs=[]
    t1 = time.time()

    for a in range(0, 5):
        x = numbers[a]
        p=multiprocessing.Process(target=force, args=(words, x,))
        jobs.append(p)
        p.start()
    p.join()

    for b in range(5, 10):
        x = numbers[b]
        p=multiprocessing.Process(target=force, args=(words, x,))
        jobs.append(p)
        p.start()
    p.join()

    t2 = time.time()
    times=t2-t1
    print times

def menu():

    print "DES ciphers + Brute Force"
    print "1. Encrypt\n2. Decrypt\n3. BruteForce"
    opt=raw_input("Select Option: ")
    words=raw_input("Enter string: ")
    if opt=="1":
        #start encrypting
        key=raw_input("Enter 8 byte key: ")
        encrypt(key, words)
    elif opt=="2":
        #start decrypting
        words=eval(words)
        key=raw_input("Enter 8 byte key: ")
        decrypt(key, words)
    elif opt=="3":
        #brute force
        words=eval(words)
        multiP(words)

menu()




